# app_safe_ai.py
import streamlit as st
from utils import load_bacteria_db, symptoms_from_text, search_db
import os
import re

# Opcional: si vas a usar OpenAI
try:
    import openai
    OPENAI_AVAILABLE = True
except Exception:
    OPENAI_AVAILABLE = False

st.set_page_config(page_title="Asistente Educativo Seguro", layout="wide")
st.title("ü§ù Asistente Educativo con IA (modo seguro)")

st.markdown(
    "‚ö†Ô∏è **Advertencia**: Esta herramienta es educativa. No realiza diagn√≥sticos ni reemplaza a un profesional sanitario. "
    "Si hay signos de alarma (p. ej. sangrado abundante, dificultad para respirar, p√©rdida de conciencia), busca atenci√≥n de emergencia."
)

# ---- Consentimiento ----
st.header("Consentimiento para usar IA")
use_ai = st.checkbox("Doy mi consentimiento expl√≠cito para que esta consulta sea analizada por una IA (OpenAI) para obtener res√∫menes y orientaci√≥n educativa. Entiendo que no es diagn√≥stico.", value=False)

# ---- Entrada de s√≠ntomas / problema ----
st.header("Describe s√≠ntomas o pega texto de estudio / gu√≠a")
user_text = st.text_area("Describe brevemente los s√≠ntomas o pega aqu√≠ el texto del estudio/gu√≠a (m√°x 4000 caracteres):", height=180)

# Detecci√≥n de signos de alarma
ALARM_WORDS = ['sangrado', 'dificultad para respirar', 'desmayo', 'p√©rdida de conciencia', 'dolor tor√°cico', 'hemoptisis', 'colapso']
lower_text = (user_text or "").lower()

if any(w in lower_text for w in ALARM_WORDS):
    st.error("Se detect√≥ una posible situaci√≥n de emergencia. Por favor, busca atenci√≥n m√©dica de inmediato (urgencias).")
else:
    st.success("No se detectaron palabras de alarma en el texto ingresado (esto no excluye urgencias).")

# ---- Botones de acci√≥n ----
col1, col2, col3 = st.columns(3)
with col1:
    btn_summarize = st.button("üìù Resumir texto / art√≠culo con IA")
with col2:
    btn_questions = st.button("‚ùì Generar preguntas para el m√©dico")
with col3:
    btn_eval_study = st.button("üî¨ Evaluar estudio (metodolog√≠a)")

# Funci√≥n util: prompt seguro
def safe_prompt_template(task, text):
    """
    task: 'summarize'|'questions'|'evaluate'
    text: contenido del usuario
    """
    base = (
        "INSTRUCCIONES CLARAS: Este es un **servicio educativo**. "
        "No ofrezcas diagn√≥sticos ni recomendaciones de tratamiento definitivas. "
        "Indica expl√≠citamente que la informaci√≥n es educacional y sugiere consultar a un profesional. "
        "Cita referencias sugeridas si las hay. Responde en espa√±ol y usa un lenguaje comprensible."
    )
    if task == 'summarize':
        ask = "Resume el siguiente texto en un p√°rrafo conciso, luego lista 3 puntos clave y 2 referencias o gu√≠as relevantes si aplican:"
    elif task == 'questions':
        ask = "Genera una lista de preguntas √∫tiles que el paciente puede llevar a su m√©dico sobre los s√≠ntomas o hallazgos descritos. Incluye 5 preguntas claras y una breve explicaci√≥n de por qu√© cada pregunta es relevante."
    elif task == 'evaluate':
        ask = "Analiza la metodolog√≠a del estudio descrito: resume el dise√±o, tama√±o muestral, principales limitaciones y si las conclusiones est√°n sustentadas por los datos. Usa lenguaje claro y da consejos sobre qu√© buscar en la validez del estudio."
    prompt = f"{base}\n\n{ask}\n\nTEXTO:\n'''{text}'''\n\nRESPUESTA:"
    return prompt

# ---- Llamada segura a IA ----
def call_openai(prompt: str):
    if not OPENAI_AVAILABLE:
        return "OpenAI no est√° disponible en este entorno. Instala la librer√≠a `openai` y configura la variable de entorno OPENAI_API_KEY."
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        return "No se encontr√≥ la variable OPENAI_API_KEY en el entorno. Config√∫rala antes de usar IA."
    openai.api_key = api_key
    try:
        resp = openai.ChatCompletion.create(
            model="gpt-4o-mini",  # o gpt-4o, gpt-4o-mini-thinking seg√∫n disponibilidad; ajusta si es necesario
            messages=[
                {"role":"system", "content": "Eres un asistente que ayuda a resumir y analizar textos m√©dicos de forma educativa. No formulas diagn√≥sticos."},
                {"role":"user", "content": prompt}
            ],
            max_tokens=600,
            temperature=0.0
        )
        return resp['choices'][0]['message']['content'].strip()
    except Exception as e:
        return f"Error al llamar a la API: {e}"

# ---- Ejecutar acciones s√≥lo si el usuario dio consentimiento ----
if (btn_summarize or btn_questions or btn_eval_study) and not use_ai:
    st.warning("Marca la casilla de consentimiento para usar IA y vuelve a intentar.")
else:
    if btn_summarize and use_ai:
        prompt = safe_prompt_template('summarize', user_text)
        with st.spinner("Consultando IA de forma segura..."):
            out = call_openai(prompt)
        st.subheader("Resumen (IA, educativo)")
        st.write(out)

    if btn_questions and use_ai:
        prompt = safe_prompt_template('questions', user_text)
        with st.spinner("Generando preguntas con IA..."):
            out = call_openai(prompt)
        st.subheader("Preguntas sugeridas para el m√©dico")
        st.write(out)

    if btn_eval_study and use_ai:
        prompt = safe_prompt_template('evaluate', user_text)
        with st.spinner("Evaluando estudio con IA..."):
            out = call_openai(prompt)
        st.subheader("Evaluaci√≥n metodol√≥gica (IA, educativa)")
        st.write(out)
